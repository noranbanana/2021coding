//https://leetcode.com/problems/n-queens/submissions/

class Solution {
public:
    vector<vector<int>> all_set;
    int input_size;
    
    bool checker(vector<int> position, int input){
        
        vector<int> left_up_diff;
        vector<int> right_up_diff;
        int input_left_up = input - position.size();
        int input_right_up = input - (input_size - 1 - position.size());
        for(int i=0; i<position.size(); i++){
            if(input_left_up == position[i] - i)
                return false;
            if(input_right_up == (position[i] - (input_size-1-i)))
                return false;
        }
                
        return true;
        
    }
    
    void set_maker(vector<int> set, vector<int> left_num){
        if(left_num.empty()){
            all_set.push_back(set);
            return;
        }
        
        for (int i = 0; i < left_num.size(); i++) {
            if(!checker(set, left_num[i]))
                continue;
            vector<int> new_set = set;
            new_set.push_back(left_num[i]);
            
            vector<int> new_left_num = left_num;
            swap(new_left_num[i], new_left_num.back());
            new_left_num.pop_back();
            set_maker(new_set, new_left_num); 
        }
        return;
    }
    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> map;
        vector<int> position;
        input_size = n;
        for (int i = 0; i < n; i++)
        {
            position.push_back(i);
        }
        vector<int> set;
        set_maker(set, position);
        
        
        for(auto & single_set : all_set){
                
            
            vector<string> success;
            for(int k = 0; k < n; k++){
                string line(n, '.'); 
                line[single_set[k]] = 'Q';
                success.push_back(line);
            }
            map.push_back(success);
            
        }
    
        
        return map;
    }
};
